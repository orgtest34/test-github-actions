name: Create Tag on PR Merge or Manual Dispatch

on:
  workflow_run:
    workflows: ["PR Workflow"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name (will be used if manually triggered)"
        required: true
      release_body:
        description: "Release description (will be used if manually triggered)"
        required: true

jobs:
  create_tag_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Fetch PR Info or Use Manual Inputs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.tag_name }}"
            PR_BODY="${{ github.event.inputs.release_body }}"
          else
            # Fetch the latest merged PR title and body using GitHub CLI
            PR_TITLE=$(gh pr list --state merged --limit 1 --json title --jq '.[0].title')
            PR_BODY=$(gh pr list --state merged --limit 1 --json body --jq '.[0].body')
            TAG_NAME="$PR_TITLE"
          fi

          # Print the fetched data (for debugging)
          echo "PR_TITLE: $PR_TITLE"
          echo "PR_BODY: $PR_BODY"

          # Replace spaces with underscores in the tag name for consistency
          TAG_NAME=$(echo "$TAG_NAME" | sed 's/ /_/g')

          # Create the tag
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

          # Create a release using GitHub CLI with the tag name and PR body
          gh release create "$TAG_NAME" --title "$PR_TITLE" --notes "$PR_BODY" > release_output.txt

          # Extract the release URL and upload URL
          RELEASE_URL=$(cat release_output.txt | grep -oP 'https://github.com/[^ ]+')
          echo "Release URL: $RELEASE_URL"
          UPLOAD_URL=$(gh release view "$TAG_NAME" --json uploadUrl --jq '.uploadUrl')

          # Store the upload URL in an environment variable
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      - name: Create spectrocoin.zip
        run: |
          mkdir spectrocoin-accepting-bitcoin  # Create the folder inside the working directory
          # Copy only the necessary files and exclude the folder and unwanted files
          find . -maxdepth 1 ! -name 'spectrocoin-accepting-bitcoin' ! -name '.' ! -name '.git' ! -name '.github' ! -name 'README.txt' ! -name 'README.md' ! -name 'changelog.md' ! -name '.gitignore' -exec cp -r {} spectrocoin-accepting-bitcoin/ \;
          zip -r spectrocoin.zip spectrocoin-accepting-bitcoin  # Zip the folder
        shell: bash

      - name: Upload spectrocoin.zip as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: spectrocoin.zip
          asset_name: spectrocoin.zip
          asset_content_type: application/zip
